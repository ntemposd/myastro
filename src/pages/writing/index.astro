---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

// Load all post covers from src/assets/posts (supports subfolders)
const coversGlob = import.meta.glob('../../assets/posts/**/*.{png,jpg,jpeg,webp,avif,svg}', { eager: true });

// Map by basename (no extension) → ImageMetadata
const base = (p: string) => p.split('/').pop()!.replace(/\.[^.]+$/,'').toLowerCase();
const coverMap = new Map<string, any>(
  Object.entries(coversGlob).map(([k, mod]) => [base(k), (mod as any).default ?? mod])
);

// Resolve a frontmatter string ("/posts/foo.webp" or "foo.webp") or fallback to slug
const resolveCover = (pathStr: unknown, slug: string) => {
  if (pathStr && typeof pathStr === 'object' && 'src' in (pathStr as any)) return pathStr as any; // already ImageMetadata
  const tryKeys = [
    typeof pathStr === 'string' ? base(pathStr) : null,
    slug.toLowerCase(),
  ].filter(Boolean) as string[];
  for (const k of tryKeys) {
    const hit = coverMap.get(k);
    if (hit) return hit;
  }
  return null;
};

let posts = await getCollection('posts');

posts = posts
  .filter((p) => !p.data.draft)
  .sort((a, b) => {
    const da = a.data.date instanceof Date ? a.data.date : new Date(a.data.date);
    const db = b.data.date instanceof Date ? b.data.date : new Date(b.data.date);
    return db.getTime() - da.getTime();
  });

// tags helper
const normTags = (tags: unknown) =>
  Array.isArray(tags) ? tags
  : typeof tags === 'string' ? tags.split(',').map((t) => t.trim()).filter(Boolean)
  : [];
---

<Layout title="Writings — ntemposd">
  <h1 class="text-3xl font-bold mb-2 text-gray-900">Writings</h1>
  <p class="text-gray-700 mb-10 max-w-3xl">
    A few highlights from the last years — products, tools, and experiments I’ve built or led.
  </p>

  {posts.length === 0 ? (
    <p class="text-gray-600">No posts yet.</p>
  ) : (
    <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
      {posts.map((post) => {
        const d = (post.data.date instanceof Date ? post.data.date : new Date(post.data.date))
          .toISOString()
          .split('T')[0];

        const rawCover = (post.data.image ?? post.data.cover) as unknown;
        const cover = resolveCover(rawCover, post.slug);
        const tags = normTags(post.data.tags);

        return (
          <a
            href={`/writing/${post.slug}/`}
            class="group block rounded-2xl bg-white border border-gray-100 overflow-hidden
                   shadow-sm hover:shadow-lg transition-all duration-300 hover:-translate-y-1"
          >
            <div class="aspect-[6/3] overflow-hidden bg-gray-50">
              {cover ? (
                <Image
                  src={cover}
                  alt={post.data.title}
                  widths={[480, 768, 1200, 1600]}
                  sizes="(min-width:1024px) 33vw, (min-width:640px) 50vw, 100vw"
                  loading="eager"
                  fetchpriority="high"
                  decoding="async"
                  class="w-full h-full object-cover group-hover:scale-102 transition-transform duration-300 ease-out"
                />
              ) : (
                <div class="w-full h-full grid place-items-center text-gray-400 text-sm">
                  No cover
                </div>
              )}
            </div>

            <div class="p-5">
              <h3 class="text-lg font-semibold mb-1">{post.data.title}</h3>
              <p class="text-xs text-gray-500 mb-2">{d}</p>

              {post.data.excerpt && (
                <p class="text-gray-600 text-sm leading-relaxed mb-3 line-clamp-3">
                  {post.data.excerpt}
                </p>
              )}

              {tags.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {tags.map((t) => (
                    <span class="text-xs bg-gray-100 px-2 py-1 rounded-md text-gray-600">#{t}</span>
                  ))}
                </div>
              )}
            </div>
          </a>
        );
      })}
    </div>
  )}
</Layout>
